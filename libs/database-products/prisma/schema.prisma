generator client {
  provider      = "prisma-client-js"
  output        = "../src/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("PRODUCTS_DATABASE_URL")
}

enum chargeType {
  one_time
  recurring
}

enum packageType {
  flat
  package
}

model Category {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now()) @db.Timestamptz
  workspaceId String   @db.Uuid
  userId      String   @db.Uuid

  name        String
  description String  @db.Text
  published   Boolean @default(false)
  slug        String  @unique

  products Product[]

  @@map("categories")
}

model Product {
  id          String    @id @default(uuid()) @db.Uuid
  createdAt   DateTime  @default(now()) @db.Timestamptz
  workspaceId String    @db.Uuid
  userId      String    @db.Uuid
  slug        String    @unique
  name        String
  image       String
  description String
  published   Boolean   @default(false)
  pricings    Pricing[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.Uuid

  @@index([workspaceId])
  @@index([userId])
  @@map("products")
}

model Pricing {
  id           String      @id @default(uuid()) @db.Uuid
  amount       String
  charge_type  chargeType  @default(one_time)
  package_type packageType @default(flat)
  workspaceId  String      @db.Uuid
  userId       String      @db.Uuid
  currency     String

  createdAt DateTime @default(now()) @db.Timestamptz
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.Uuid

  fees PricingFee[]

  @@index([workspaceId])
  @@index([userId])
  @@map("pricings")
}

model PricingFee {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamptz
  pricings  Pricing[]

  name String

  description String?
  total       Decimal @default(0.0)

  @@map("pricing_fees")
}
